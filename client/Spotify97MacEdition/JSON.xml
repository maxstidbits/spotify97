<?xml version="1.0"?>
<RBProject version="5.5.3">
<block type="Module" ID="481533230">
 <ObjName>JSON</ObjName>
 <ObjContainerID>-482103612</ObjContainerID>
 <EditBounds><Rect left="160" top="944" width="0" height="0"/></EditBounds>
 <EditSplit>235</EditSplit>
 <BrowserPositionGroup>
  <BrowserPositionElement>
   <ScreenKey>100001810</ScreenKey>
   <EditBounds><Rect left="160" top="944" width="0" height="0"/></EditBounds>
   <EditSplit>235</EditSplit>
  </BrowserPositionElement>
  <BrowserPositionElement>
   <ScreenKey>100001207</ScreenKey>
   <EditBounds><Rect left="284" top="270" width="706" height="417"/></EditBounds>
   <EditSplit>235</EditSplit>
  </BrowserPositionElement>
 </BrowserPositionGroup>
 <IsClass>0</IsClass>
 <ObjName>JSON</ObjName>
 <ObjSize>36</ObjSize>
 <IsInterface>0</IsInterface>
 <Property Flags="5">compact As Boolean</Property>
 <Property Flags="5">decimalFormat As String</Property>
 <Property Flags="5">indentSpacing As Integer</Property>
 <Method>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>parse</ItemName>
  <ItemParams>text as string</ItemParams>
  <ItemResult>dictionary</ItemResult>
  <ItemFlags>1</ItemFlags>
  <ItemSource>
   <StartSelRow>1</StartSelRow>
   <StartSelCol>0</StartSelCol>
   <EndSelRow>1</EndSelRow>
   <EndSelCol>0</EndSelCol>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function parse(text as string) As dictionary</SourceLine>
   <SourceLine>dim result as variant</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim pointer as Integer = 1</SourceLine>
   <SourceLine>skipWhiteSpace(text,pointer)</SourceLine>
   <SourceLine>return parseObject(text,pointer)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </Method>
 <Method>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>getChar</ItemName>
  <ItemParams>text as string, byref pointer as integer</ItemParams>
  <ItemResult>string</ItemResult>
  <ItemFlags>33</ItemFlags>
  <ItemSource>
   <StartSelRow>1</StartSelRow>
   <StartSelCol>0</StartSelCol>
   <EndSelRow>1</EndSelRow>
   <EndSelCol>0</EndSelCol>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function getChar(text as string, byref pointer as integer) As string</SourceLine>
   <SourceLine>dim char as string = text.mid(pointer,1)</SourceLine>
   <SourceLine>pointer = pointer + 1</SourceLine>
   <SourceLine>return char</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </Method>
 <Method>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>parseArray</ItemName>
  <ItemParams>text as string, byref pointer as integer</ItemParams>
  <ItemResult>collection</ItemResult>
  <ItemFlags>33</ItemFlags>
  <ItemSource>
   <StartSelRow>8</StartSelRow>
   <StartSelCol>0</StartSelCol>
   <EndSelRow>8</EndSelRow>
   <EndSelCol>0</EndSelCol>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function parseArray(text as string, byref pointer as integer) As collection</SourceLine>
   <SourceLine>dim result as new Collection</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim char as string = getChar(text,pointer)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if char &lt;&gt; "[" then</SourceLine>
   <SourceLine>raise new UnsupportedFormatException</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check for empty array</SourceLine>
   <SourceLine>skipWhiteSpace(text,pointer)</SourceLine>
   <SourceLine>if text.mid(pointer,1) = "]" then</SourceLine>
   <SourceLine>pointer = pointer + 1</SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>nextEntry:</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>skipWhiteSpace(text,pointer)</SourceLine>
   <SourceLine>dim value as Variant = parseValue(text,pointer)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result.Add value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>skipWhiteSpace(text,pointer)</SourceLine>
   <SourceLine>char = getChar(text,pointer)</SourceLine>
   <SourceLine>select case char</SourceLine>
   <SourceLine>case ","</SourceLine>
   <SourceLine>goto nextEntry</SourceLine>
   <SourceLine>case "]"</SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>raise new UnsupportedFormatException</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </Method>
 <Method>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>parseNumber</ItemName>
  <ItemParams>text as string, byref pointer as integer</ItemParams>
  <ItemResult>variant</ItemResult>
  <ItemFlags>33</ItemFlags>
  <ItemSource>
   <StartSelRow>94</StartSelRow>
   <StartSelCol>8</StartSelCol>
   <EndSelRow>94</EndSelRow>
   <EndSelCol>8</EndSelCol>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function parseNumber(text as string, byref pointer as integer) As variant</SourceLine>
   <SourceLine>dim number as string</SourceLine>
   <SourceLine>dim int as Boolean = true</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim char as string = getChar(text,pointer)</SourceLine>
   <SourceLine>if char = "-" then</SourceLine>
   <SourceLine>number = number + char</SourceLine>
   <SourceLine>char = getChar(text,pointer)</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>select case char</SourceLine>
   <SourceLine>case "0"</SourceLine>
   <SourceLine>select case getChar(text,pointer)</SourceLine>
   <SourceLine>case "."</SourceLine>
   <SourceLine>goto decimalPart</SourceLine>
   <SourceLine>case "e"</SourceLine>
   <SourceLine>goto exponentPart</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>pointer = pointer - 1</SourceLine>
   <SourceLine>goto finish</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>case "1" to "9"</SourceLine>
   <SourceLine>number = number + char</SourceLine>
   <SourceLine>goto integerPart</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>raise new UnsupportedFormatException</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>integerPart:</SourceLine>
   <SourceLine>char = getChar(text,pointer)</SourceLine>
   <SourceLine>select case char</SourceLine>
   <SourceLine>case "0" to "9"</SourceLine>
   <SourceLine>number = number + char</SourceLine>
   <SourceLine>goto integerPart</SourceLine>
   <SourceLine>case "."</SourceLine>
   <SourceLine>number = number + char</SourceLine>
   <SourceLine>goto decimalPart</SourceLine>
   <SourceLine>case "e", "E"</SourceLine>
   <SourceLine>number = number + char</SourceLine>
   <SourceLine>goto exponentPart</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>pointer = pointer - 1</SourceLine>
   <SourceLine>goto finish</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>decimalPart:</SourceLine>
   <SourceLine>int = false</SourceLine>
   <SourceLine>char = getChar(text,pointer)</SourceLine>
   <SourceLine>Select case char</SourceLine>
   <SourceLine>case "0" to "9"</SourceLine>
   <SourceLine>number = number + char</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>raise new UnsupportedFormatException</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>continueDecimal:</SourceLine>
   <SourceLine>char = getChar(text,pointer)</SourceLine>
   <SourceLine>select case char</SourceLine>
   <SourceLine>case "0" to "9"</SourceLine>
   <SourceLine>number = number + char</SourceLine>
   <SourceLine>goto continueDecimal</SourceLine>
   <SourceLine>case "e", "E"</SourceLine>
   <SourceLine>number = number + char</SourceLine>
   <SourceLine>goto exponentPart</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>pointer = pointer - 1</SourceLine>
   <SourceLine>goto finish</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>exponentPart:</SourceLine>
   <SourceLine>int = false</SourceLine>
   <SourceLine>char = getChar(text,pointer)</SourceLine>
   <SourceLine>select case char</SourceLine>
   <SourceLine>case "+", "-"</SourceLine>
   <SourceLine>text = text + char</SourceLine>
   <SourceLine>goto continueExponent</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>pointer = pointer - 1</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>continueExponent:</SourceLine>
   <SourceLine>char = getChar(text,pointer)</SourceLine>
   <SourceLine>select case char</SourceLine>
   <SourceLine>case "0" to "9"</SourceLine>
   <SourceLine>number = number + char</SourceLine>
   <SourceLine>goto continueExponent</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>pointer = pointer - 1</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>finish:</SourceLine>
   <SourceLine>dim value as double = val(number)</SourceLine>
   <SourceLine>dim j as integer = value</SourceLine>
   <SourceLine>if int then</SourceLine>
   <SourceLine>return j</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>return value //double</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </Method>
 <Method>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>skipWhiteSpace</ItemName>
  <ItemParams>text as string, byref pointer as integer</ItemParams>
  <ItemResult></ItemResult>
  <ItemFlags>33</ItemFlags>
  <ItemSource>
   <StartSelRow>1</StartSelRow>
   <StartSelCol>0</StartSelCol>
   <EndSelRow>1</EndSelRow>
   <EndSelCol>0</EndSelCol>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub skipWhiteSpace(text as string, byref pointer as integer)</SourceLine>
   <SourceLine>do</SourceLine>
   <SourceLine>select case getChar(text,pointer)</SourceLine>
   <SourceLine>case " ", chr(9), chr(10), chr(13)</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>pointer = pointer - 1</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>loop</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </Method>
 <Method>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>parseValue</ItemName>
  <ItemParams>text as string, byref pointer as integer</ItemParams>
  <ItemResult>variant</ItemResult>
  <ItemFlags>33</ItemFlags>
  <ItemSource>
   <StartSelRow>1</StartSelRow>
   <StartSelCol>0</StartSelCol>
   <EndSelRow>1</EndSelRow>
   <EndSelCol>0</EndSelCol>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function parseValue(text as string, byref pointer as integer) As variant</SourceLine>
   <SourceLine>dim chars as string = text.mid(pointer,4)</SourceLine>
   <SourceLine>pointer = pointer + 4</SourceLine>
   <SourceLine>select case chars</SourceLine>
   <SourceLine>case "true"</SourceLine>
   <SourceLine>return true</SourceLine>
   <SourceLine>case "fals"</SourceLine>
   <SourceLine>if getChar(text,pointer) = "e" then return false</SourceLine>
   <SourceLine>pointer = pointer - 5</SourceLine>
   <SourceLine>case "null"</SourceLine>
   <SourceLine>return nil</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>pointer = pointer - 4</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim char as string = chars.left(1)</SourceLine>
   <SourceLine>select case char</SourceLine>
   <SourceLine>case "-", "0" to "9"</SourceLine>
   <SourceLine>return parseNumber(text,pointer)</SourceLine>
   <SourceLine>case """"</SourceLine>
   <SourceLine>return parseString(text,pointer)</SourceLine>
   <SourceLine>case "{"</SourceLine>
   <SourceLine>return parseObject(text,pointer)</SourceLine>
   <SourceLine>case "["</SourceLine>
   <SourceLine>return parseArray(text,pointer)</SourceLine>
   <SourceLine>case ""</SourceLine>
   <SourceLine>return nil //end of file</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>raise new UnsupportedFormatException</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </Method>
 <Method>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>parseString</ItemName>
  <ItemParams>text as string, byref pointer as integer</ItemParams>
  <ItemResult>string</ItemResult>
  <ItemFlags>33</ItemFlags>
  <ItemSource>
   <StartSelRow>42</StartSelRow>
   <StartSelCol>0</StartSelCol>
   <EndSelRow>42</EndSelRow>
   <EndSelCol>0</EndSelCol>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function parseString(text as string, byref pointer as integer) As string</SourceLine>
   <SourceLine>dim result as new StringBuffer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim char as string = getChar(text,pointer)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if char &lt;&gt; """" then</SourceLine>
   <SourceLine>raise new UnsupportedFormatException</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>nextChar:</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>char = getChar(text,pointer)</SourceLine>
   <SourceLine>dim uni as string</SourceLine>
   <SourceLine>select case char</SourceLine>
   <SourceLine>case """"</SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>case "\"</SourceLine>
   <SourceLine>goto escape</SourceLine>
   <SourceLine>case ""</SourceLine>
   <SourceLine>//end of input</SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>result.Append char</SourceLine>
   <SourceLine>goto nextChar</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>escape:</SourceLine>
   <SourceLine>char = getChar(text,pointer)</SourceLine>
   <SourceLine>select case asc(char)</SourceLine>
   <SourceLine>case 34, 92, 47 // " \ /</SourceLine>
   <SourceLine>result.Append char</SourceLine>
   <SourceLine>case 98 //b</SourceLine>
   <SourceLine>result.Append chr(8)</SourceLine>
   <SourceLine>case 102 //f</SourceLine>
   <SourceLine>result.Append chr(12)</SourceLine>
   <SourceLine>case 110 //n</SourceLine>
   <SourceLine>result.Append chr(10)</SourceLine>
   <SourceLine>case 114 //r</SourceLine>
   <SourceLine>result.Append chr(13)</SourceLine>
   <SourceLine>case 116 //t</SourceLine>
   <SourceLine>result.Append chr(9)</SourceLine>
   <SourceLine>case 117 //u</SourceLine>
   <SourceLine>uni = text.Mid(pointer,4)</SourceLine>
   <SourceLine>if len(uni) &lt; 4 then raise new UnsupportedFormatException</SourceLine>
   <SourceLine>result.Append Encodings.UTF8.Chr(val("&amp;h" + uni))</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>raise new UnsupportedFormatException</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>goto nextChar</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </Method>
 <Method>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>parseObject</ItemName>
  <ItemParams>text as string, byref pointer as integer</ItemParams>
  <ItemResult>dictionary</ItemResult>
  <ItemFlags>33</ItemFlags>
  <ItemSource>
   <StartSelRow>35</StartSelRow>
   <StartSelCol>13</StartSelCol>
   <EndSelRow>35</EndSelRow>
   <EndSelCol>13</EndSelCol>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function parseObject(text as string, byref pointer as integer) As dictionary</SourceLine>
   <SourceLine>dim result as new Dictionary</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim char as string = getChar(text,pointer)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>if char &lt;&gt; "{" then</SourceLine>
   <SourceLine>raise new UnsupportedFormatException</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//check for empty object</SourceLine>
   <SourceLine>skipWhiteSpace(text,pointer)</SourceLine>
   <SourceLine>if text.mid(pointer,1) = "}" then</SourceLine>
   <SourceLine>pointer = pointer + 1</SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>nextEntry:</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>skipWhiteSpace(text,pointer)</SourceLine>
   <SourceLine>dim key as string = parseString(text,pointer)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>skipWhiteSpace(text,pointer)</SourceLine>
   <SourceLine>if getChar(text,pointer) &lt;&gt; ":" then raise new UnsupportedFormatException</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>skipWhiteSpace(text,pointer)</SourceLine>
   <SourceLine>dim value as Variant = parseValue(text,pointer)</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>result.Value(key) = value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>skipWhiteSpace(text,pointer)</SourceLine>
   <SourceLine>char = getChar(text,pointer)</SourceLine>
   <SourceLine>select case char</SourceLine>
   <SourceLine>case ","</SourceLine>
   <SourceLine>goto nextEntry</SourceLine>
   <SourceLine>case "}"</SourceLine>
   <SourceLine>return result</SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>raise new UnsupportedFormatException</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </Method>
 <Method>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>serialise</ItemName>
  <ItemParams>data as dictionary</ItemParams>
  <ItemResult>string</ItemResult>
  <ItemFlags>1</ItemFlags>
  <ItemSource>
   <StartSelRow>1</StartSelRow>
   <StartSelCol>0</StartSelCol>
   <EndSelRow>1</EndSelRow>
   <EndSelCol>0</EndSelCol>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Function serialise(data as dictionary) As string</SourceLine>
   <SourceLine>if data = nil then return ""</SourceLine>
   <SourceLine>dim buffer as new StringBuffer</SourceLine>
   <SourceLine>serialise(data,0,buffer)</SourceLine>
   <SourceLine>return buffer</SourceLine>
   <SourceLine>End Function</SourceLine>
  </ItemSource>
 </Method>
 <Method>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>serialise</ItemName>
  <ItemParams>value as variant, indent as integer, buffer as StringBuffer</ItemParams>
  <ItemResult></ItemResult>
  <ItemFlags>33</ItemFlags>
  <ItemSource>
   <StartSelRow>49</StartSelRow>
   <StartSelCol>4</StartSelCol>
   <EndSelRow>49</EndSelRow>
   <EndSelCol>9</EndSelCol>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub serialise(value as variant, indent as integer, buffer as StringBuffer)</SourceLine>
   <SourceLine>if value = nil then</SourceLine>
   <SourceLine>buffer.Append "null"</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>dim fmt as string</SourceLine>
   <SourceLine>dim c as Collection </SourceLine>
   <SourceLine>dim i as integer</SourceLine>
   <SourceLine>dim d as Dictionary </SourceLine>
   <SourceLine>dim key as string</SourceLine>
   <SourceLine>select case VarType(value)</SourceLine>
   <SourceLine>case 11</SourceLine>
   <SourceLine>if value = true then buffer.Append "true" else buffer.Append "false"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case 2</SourceLine>
   <SourceLine>buffer.Append value</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case 5 </SourceLine>
   <SourceLine>fmt = format(value,decimalFormat)</SourceLine>
   <SourceLine>if fmt.InStr(",") &gt; 0 and decimalFormat.InStr(",") = 0 then fmt = fmt.Replace(",",".")</SourceLine>
   <SourceLine>buffer.Append fmt</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case 8</SourceLine>
   <SourceLine>buffer.Append """"</SourceLine>
   <SourceLine>escape value.StringValue,buffer</SourceLine>
   <SourceLine>buffer.Append """"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case 9</SourceLine>
   <SourceLine>if value isa Collection then</SourceLine>
   <SourceLine>buffer.Append "["</SourceLine>
   <SourceLine>if Collection(value).Count &gt; 0 then</SourceLine>
   <SourceLine>if not compact Then buffer.Append EndOfLine</SourceLine>
   <SourceLine>c = Collection(value.ObjectValue)</SourceLine>
   <SourceLine>for i = 1 to c.Count</SourceLine>
   <SourceLine>if not compact then indentBuffer indent + indentSpacing,buffer</SourceLine>
   <SourceLine>serialise c.Item(i),indent + indentSpacing,buffer</SourceLine>
   <SourceLine>if i &lt; c.Count then buffer.Append ","</SourceLine>
   <SourceLine>if not compact Then buffer.Append EndOfLine</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>if not compact then indentBuffer indent,buffer</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>buffer.Append "]"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>elseif value isa Dictionary then</SourceLine>
   <SourceLine>buffer.Append "{"</SourceLine>
   <SourceLine>if Dictionary(value).Count &gt; 0 then</SourceLine>
   <SourceLine>if not compact Then buffer.Append EndOfLine</SourceLine>
   <SourceLine>d = Dictionary(value.ObjectValue)</SourceLine>
   <SourceLine>for i = 0 to d.Count - 1</SourceLine>
   <SourceLine>key = d.Key(i)</SourceLine>
   <SourceLine>if not compact then indentBuffer indent + indentSpacing,buffer</SourceLine>
   <SourceLine>buffer.Append """"</SourceLine>
   <SourceLine>escape key,buffer</SourceLine>
   <SourceLine>buffer.Append """:"</SourceLine>
   <SourceLine>serialise d.Value(key),indent + indentSpacing,buffer</SourceLine>
   <SourceLine>if i &lt; d.Count - 1 then buffer.Append ","</SourceLine>
   <SourceLine>if not compact Then buffer.Append EndOfLine</SourceLine>
   <SourceLine>next</SourceLine>
   <SourceLine>if not compact then indentBuffer indent,buffer</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>buffer.Append "}"</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>raise new UnsupportedFormatException</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>else</SourceLine>
   <SourceLine>raise new UnsupportedFormatException</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </Method>
 <Method>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>indentBuffer</ItemName>
  <ItemParams>level as integer,buffer as StringBuffer</ItemParams>
  <ItemResult></ItemResult>
  <ItemFlags>33</ItemFlags>
  <ItemSource>
   <StartSelRow>1</StartSelRow>
   <StartSelCol>0</StartSelCol>
   <EndSelRow>1</EndSelRow>
   <EndSelCol>0</EndSelCol>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub indentBuffer(level as integer,buffer as StringBuffer)</SourceLine>
   <SourceLine>select case level</SourceLine>
   <SourceLine>case 0</SourceLine>
   <SourceLine>return</SourceLine>
   <SourceLine>case 2</SourceLine>
   <SourceLine>buffer.Append "  "</SourceLine>
   <SourceLine>case 4</SourceLine>
   <SourceLine>buffer.Append "    "</SourceLine>
   <SourceLine>case 6</SourceLine>
   <SourceLine>buffer.Append "      "</SourceLine>
   <SourceLine>case 8</SourceLine>
   <SourceLine>buffer.Append "        "</SourceLine>
   <SourceLine>case is &gt; 9</SourceLine>
   <SourceLine>buffer.Append "          " //10</SourceLine>
   <SourceLine>indentBuffer level - 10, buffer</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>//odd indent sizes are less popular, so improve</SourceLine>
   <SourceLine>//performance by testing for these after even values</SourceLine>
   <SourceLine></SourceLine>
   <SourceLine>case 1</SourceLine>
   <SourceLine>buffer.Append " "</SourceLine>
   <SourceLine>case 3</SourceLine>
   <SourceLine>buffer.Append "   "</SourceLine>
   <SourceLine>case 5</SourceLine>
   <SourceLine>buffer.Append "     "</SourceLine>
   <SourceLine>case 7</SourceLine>
   <SourceLine>buffer.Append "       "</SourceLine>
   <SourceLine>case 9</SourceLine>
   <SourceLine>buffer.Append "         "</SourceLine>
   <SourceLine>end</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </Method>
 <Method>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>escape</ItemName>
  <ItemParams>text as string, buffer as StringBuffer</ItemParams>
  <ItemResult></ItemResult>
  <ItemFlags>33</ItemFlags>
  <ItemSource>
   <StartSelRow>4</StartSelRow>
   <StartSelCol>25</StartSelCol>
   <EndSelRow>4</EndSelRow>
   <EndSelCol>25</EndSelCol>
   <TextEncoding>134217984</TextEncoding>
   <SourceLine>Sub escape(text as string, buffer as StringBuffer)</SourceLine>
   <SourceLine>buffer.Append text _</SourceLine>
   <SourceLine>.ReplaceAll("\","\\") _</SourceLine>
   <SourceLine>.ReplaceAll("/","\/") _</SourceLine>
   <SourceLine>.ReplaceAll("""","\""") _</SourceLine>
   <SourceLine>.ReplaceAll(chr(8),"\b") _</SourceLine>
   <SourceLine>.ReplaceAll(chr(12),"\f") _</SourceLine>
   <SourceLine>.ReplaceAll(chr(10),"\n") _</SourceLine>
   <SourceLine>.ReplaceAll(chr(13),"\r") _</SourceLine>
   <SourceLine>.ReplaceAll(chr(9),"\t")</SourceLine>
   <SourceLine>End Sub</SourceLine>
  </ItemSource>
 </Method>
 <Constant>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>version</ItemName>
  <ItemType>2</ItemType>
  <ItemDef>1.5</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>DefaultDecimalFormat</ItemName>
  <ItemType>0</ItemType>
  <ItemDef>"""#.###############"""</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>DefaultCompact</ItemName>
  <ItemType>3</ItemType>
  <ItemDef>False</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Constant>
  <TextEncoding>134217984</TextEncoding>
  <ItemName>DefaultIndentSpacing</ItemName>
  <ItemType>1</ItemType>
  <ItemDef>2</ItemDef>
  <ItemFlags>1</ItemFlags>
 </Constant>
 <Interfaces></Interfaces>
</block>
</RBProject>
